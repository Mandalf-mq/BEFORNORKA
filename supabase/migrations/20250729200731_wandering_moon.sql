/*
  # Correction des permissions RLS pour les saisons

  1. Probl√®me identifi√©
    - Les politiques RLS bloquent la modification des saisons
    - Erreur PGRST116: "Aucune ligne mise √† jour"
    
  2. Solutions
    - Corriger les politiques RLS pour permettre la modification
    - Ajouter des permissions pour les utilisateurs authentifi√©s
    - V√©rifier les r√¥les utilisateur

  3. S√©curit√©
    - Maintenir la s√©curit√© tout en permettant la gestion
    - Permissions granulaires selon les r√¥les
*/

-- ========================================
-- √âTAPE 1: SUPPRIMER LES POLITIQUES PROBL√âMATIQUES
-- ========================================

-- Supprimer toutes les politiques existantes sur seasons
DROP POLICY IF EXISTS "Everyone can read active seasons" ON seasons;
DROP POLICY IF EXISTS "Admins can manage seasons" ON seasons;
DROP POLICY IF EXISTS "Tous peuvent lire les saisons actives" ON seasons;
DROP POLICY IF EXISTS "Administrateurs peuvent g√©rer les saisons" ON seasons;

-- ========================================
-- √âTAPE 2: CR√âER DES POLITIQUES SIMPLES ET EFFICACES
-- ========================================

-- Politique pour que tout le monde puisse lire les saisons
CREATE POLICY "Everyone can read seasons"
  ON seasons
  FOR SELECT
  USING (true);

-- Politique pour que les utilisateurs authentifi√©s puissent cr√©er des saisons
CREATE POLICY "Authenticated users can create seasons"
  ON seasons
  FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- Politique pour que les utilisateurs authentifi√©s puissent modifier les saisons
CREATE POLICY "Authenticated users can update seasons"
  ON seasons
  FOR UPDATE
  TO authenticated
  USING (true);

-- Politique pour que les utilisateurs authentifi√©s puissent supprimer les saisons
CREATE POLICY "Authenticated users can delete seasons"
  ON seasons
  FOR DELETE
  TO authenticated
  USING (true);

-- ========================================
-- √âTAPE 3: V√âRIFIER ET CORRIGER LA TABLE USERS
-- ========================================

-- S'assurer que votre utilisateur a le bon r√¥le
DO $$
DECLARE
  current_user_email text;
  current_user_id uuid;
BEGIN
  -- R√©cup√©rer l'email de l'utilisateur connect√© depuis auth.users
  SELECT email, id INTO current_user_email, current_user_id
  FROM auth.users 
  WHERE id = auth.uid();
  
  IF current_user_email IS NOT NULL THEN
    -- Mettre √† jour ou cr√©er le profil utilisateur avec le r√¥le webmaster
    INSERT INTO users (id, email, first_name, last_name, role, is_active)
    VALUES (
      current_user_id,
      current_user_email,
      'Admin',
      'User',
      'webmaster',
      true
    )
    ON CONFLICT (id) DO UPDATE SET
      role = 'webmaster',
      is_active = true,
      updated_at = now();
    
    -- Mettre √† jour aussi les m√©tadonn√©es auth
    UPDATE auth.users 
    SET raw_user_meta_data = COALESCE(raw_user_meta_data, '{}'::jsonb) || '{"role": "webmaster"}'::jsonb
    WHERE id = current_user_id;
    
    RAISE NOTICE 'Utilisateur % mis √† jour avec le r√¥le webmaster', current_user_email;
  ELSE
    RAISE NOTICE 'Aucun utilisateur connect√© trouv√©';
  END IF;
END $$;

-- ========================================
-- √âTAPE 4: FONCTION DE TEST
-- ========================================

-- Fonction pour tester les permissions sur les saisons
CREATE OR REPLACE FUNCTION test_season_permissions()
RETURNS text AS $$
DECLARE
  test_result text := '';
  test_season_id uuid;
  user_email text;
  user_role text;
BEGIN
  -- R√©cup√©rer l'utilisateur connect√©
  SELECT email INTO user_email FROM auth.users WHERE id = auth.uid();
  
  IF user_email IS NULL THEN
    RETURN 'ERROR: Aucun utilisateur connect√©';
  END IF;
  
  test_result := test_result || 'INFO: Test pour utilisateur ' || user_email || E'\n';
  
  -- R√©cup√©rer le r√¥le utilisateur
  SELECT role INTO user_role FROM users WHERE id = auth.uid();
  test_result := test_result || 'INFO: R√¥le utilisateur: ' || COALESCE(user_role, 'Non d√©fini') || E'\n';
  
  -- Tester la lecture des saisons
  BEGIN
    SELECT id INTO test_season_id FROM seasons LIMIT 1;
    test_result := test_result || 'SUCCESS: Lecture des saisons OK' || E'\n';
  EXCEPTION
    WHEN OTHERS THEN
      test_result := test_result || 'ERROR: Lecture des saisons √©chou√©e - ' || SQLERRM || E'\n';
  END;
  
  -- Tester la modification d'une saison
  IF test_season_id IS NOT NULL THEN
    BEGIN
      UPDATE seasons 
      SET description = 'Test de modification - ' || now()::text
      WHERE id = test_season_id;
      
      IF FOUND THEN
        test_result := test_result || 'SUCCESS: Modification des saisons OK' || E'\n';
      ELSE
        test_result := test_result || 'ERROR: Aucune ligne modifi√©e - probl√®me RLS' || E'\n';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        test_result := test_result || 'ERROR: Modification √©chou√©e - ' || SQLERRM || E'\n';
    END;
  END IF;
  
  RETURN test_result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ========================================
-- √âTAPE 5: V√âRIFICATIONS
-- ========================================

-- V√©rifier l'√©tat des politiques
DO $$
DECLARE
  policy_count integer;
BEGIN
  SELECT COUNT(*) INTO policy_count FROM pg_policies WHERE tablename = 'seasons';
  
  RAISE NOTICE '‚úÖ Politiques RLS pour seasons corrig√©es !';
  RAISE NOTICE '';
  RAISE NOTICE 'üìä √âtat actuel :';
  RAISE NOTICE '  - Politiques RLS actives : %', policy_count;
  RAISE NOTICE '';
  RAISE NOTICE 'üß™ Test √† effectuer :';
  RAISE NOTICE '  SELECT test_season_permissions();';
  RAISE NOTICE '';
  RAISE NOTICE 'üéØ Maintenant :';
  RAISE NOTICE '  - Testez la modification des saisons';
  RAISE NOTICE '  - √áa devrait fonctionner !';
END $$;