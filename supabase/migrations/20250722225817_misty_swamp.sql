/*
  # Cr√©ation d'un profil webmaster

  1. Cr√©ation manuelle d'un utilisateur webmaster
    - Insertion dans auth.users avec mot de passe hash√©
    - Cr√©ation du profil correspondant dans public.users
    - Attribution du r√¥le webmaster

  2. S√©curit√©
    - Mot de passe hash√© avec bcrypt
    - Email confirm√© automatiquement
    - Compte imm√©diatement utilisable

  Note: Changez le mot de passe apr√®s la premi√®re connexion
*/

-- Fonction pour cr√©er un utilisateur webmaster
CREATE OR REPLACE FUNCTION create_webmaster_user(
  user_email text,
  user_password text,
  user_first_name text DEFAULT 'Web',
  user_last_name text DEFAULT 'Master'
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  user_id uuid;
  encrypted_pw text;
BEGIN
  -- G√©n√©rer un ID utilisateur
  user_id := gen_random_uuid();
  
  -- Hasher le mot de passe (utilise la fonction interne de Supabase)
  encrypted_pw := crypt(user_password, gen_salt('bf'));
  
  -- Ins√©rer dans auth.users
  INSERT INTO auth.users (
    instance_id,
    id,
    aud,
    role,
    email,
    encrypted_password,
    email_confirmed_at,
    created_at,
    updated_at,
    raw_user_meta_data,
    confirmation_token,
    email_change,
    email_change_token_new,
    recovery_token
  ) VALUES (
    '00000000-0000-0000-0000-000000000000',
    user_id,
    'authenticated',
    'authenticated',
    user_email,
    encrypted_pw,
    NOW(),
    NOW(),
    NOW(),
    json_build_object(
      'first_name', user_first_name,
      'last_name', user_last_name,
      'role', 'webmaster'
    )::jsonb,
    '',
    '',
    '',
    ''
  );
  
  -- Ins√©rer dans auth.identities
  INSERT INTO auth.identities (
    id,
    user_id,
    identity_data,
    provider,
    created_at,
    updated_at
  ) VALUES (
    gen_random_uuid(),
    user_id,
    json_build_object(
      'sub', user_id::text,
      'email', user_email,
      'first_name', user_first_name,
      'last_name', user_last_name,
      'role', 'webmaster'
    )::jsonb,
    'email',
    NOW(),
    NOW()
  );
  
  -- Ins√©rer le profil dans public.users (si la table existe et est correctement configur√©e)
  INSERT INTO public.users (
    id,
    email,
    first_name,
    last_name,
    role,
    is_active,
    created_at,
    updated_at
  ) VALUES (
    user_id,
    user_email,
    user_first_name,
    user_last_name,
    'webmaster',
    true,
    NOW(),
    NOW()
  ) ON CONFLICT (id) DO UPDATE SET
    email = EXCLUDED.email,
    first_name = EXCLUDED.first_name,
    last_name = EXCLUDED.last_name,
    role = EXCLUDED.role,
    updated_at = NOW();
  
  RAISE NOTICE 'Utilisateur webmaster cr√©√© avec succ√®s: %', user_email;
  RAISE NOTICE 'ID utilisateur: %', user_id;
  
  RETURN user_id;
EXCEPTION
  WHEN OTHERS THEN
    RAISE EXCEPTION 'Erreur lors de la cr√©ation de l''utilisateur: %', SQLERRM;
END;
$$;

-- Cr√©er le compte webmaster
DO $$
DECLARE
  webmaster_id uuid;
BEGIN
  -- Cr√©er le compte webmaster principal
  webmaster_id := create_webmaster_user(
    'webmaster@befornorka.fr',
    'admin123',
    'Web',
    'Master'
  );
  
  RAISE NOTICE '‚úÖ Compte webmaster cr√©√© avec succ√®s !';
  RAISE NOTICE 'üìß Email: webmaster@befornorka.fr';
  RAISE NOTICE 'üîë Mot de passe: admin123';
  RAISE NOTICE 'üÜî ID: %', webmaster_id;
  RAISE NOTICE '';
  RAISE NOTICE '‚ö†Ô∏è  IMPORTANT: Changez le mot de passe apr√®s la premi√®re connexion !';
  
EXCEPTION
  WHEN unique_violation THEN
    RAISE NOTICE '‚ö†Ô∏è  Un utilisateur avec cet email existe d√©j√†';
  WHEN OTHERS THEN
    RAISE EXCEPTION 'Erreur: %', SQLERRM;
END $$;

-- Supprimer la fonction temporaire
DROP FUNCTION create_webmaster_user(text, text, text, text);

-- V√©rification
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM auth.users 
    WHERE email = 'webmaster@befornorka.fr'
  ) THEN
    RAISE NOTICE '‚úÖ V√©rification: Utilisateur webmaster trouv√© dans auth.users';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Utilisateur webmaster non trouv√© dans auth.users';
  END IF;
  
  IF EXISTS (
    SELECT 1 FROM public.users 
    WHERE email = 'webmaster@befornorka.fr' AND role = 'webmaster'
  ) THEN
    RAISE NOTICE '‚úÖ V√©rification: Profil webmaster trouv√© dans public.users';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Profil webmaster non trouv√© dans public.users';
  END IF;
END $$;